plugins {
	id 'java-library'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '2.0.76'
	id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
	distributionType = Wrapper.DistributionType.BIN
}

version = project.mod_version
group = project.mod_group

repositories {
	maven { url 'https://api.modrinth.com/maven' }
	maven { url 'https://jitpack.io' }
	mavenLocal()
	mavenCentral()
}

base {
	archivesName = project.mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {

	version = project.neo_version

	parchment {

		mappingsVersion = project.parchment_mappings_version
		minecraftVersion = project.parchment_minecraft_version

		accessTransformers {
			file('src/main/resources/META-INF/accesstransformer.cfg')
		}
	}

	runs {

		client {
			client()
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		server {
			server()
			programArgument '--nogui'
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		gameTestServer {
			type = "gameTestServer"
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		clientData {
			clientData()
			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}

		configureEach {
			systemProperty 'forge.logging.markers', 'REGISTRIES'
			logLevel = org.slf4j.event.Level.DEBUG
		}
	}

	mods {
		"${project.mod_id}" {
			sourceSet(sourceSets.main)
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

dependencies {}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {

	var replaceProperties = [
		minecraft_version : minecraft_version,
		minecraft_version_range : minecraft_version_range,
		neo_version : neo_version,
		neo_version_range : neo_version_range,
		loader_version_range : loader_version_range,
		mod_id : mod_id,
		mod_name : mod_name,
		mod_version : mod_version,
		mod_license : mod_license,
		mod_authors : mod_authors,
		mod_description : mod_description
	]

	inputs.properties replaceProperties
	expand replaceProperties
	from "src/main/templates"
	into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {

	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			url "file://${project.projectDir}/repo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}